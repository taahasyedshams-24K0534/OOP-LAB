#include<iostream>
#include<exception>

using namespace std;

class QueueOverflowException:public exception{};
class QueueUnderflowException:public exception{};

template<typename T>
class Queue{
    int capacity;
    int front;
    int rear;
    int size;
    T* data;
public:
    Queue(int cap):capacity(cap),front(0),rear(-1),size(0){
        data=new T[capacity];
    }

    ~Queue(){
        delete[] data;
    }

    void enqueue(T value){
        if(size==capacity)throw QueueOverflowException();
        rear=(rear+1)%capacity;
        data[rear]=value;
        size++;
    }

    T dequeue(){
        if(size==0)throw QueueUnderflowException();
        T value=data[front];
        front=(front+1)%capacity;
        size--;
        return value;
    }

    bool isEmpty(){
        return size==0;
    }

    bool isFull(){
        return size==capacity;
    }
};

int main(){
    Queue<int> q(3);
    try{
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);
        cout<<"Attempting to enqueue to a full queue..."<<endl;
        q.enqueue(40);
    }catch(QueueOverflowException e){
        cout<<"Caught QueueOverflowException what(): "<<e.what()<<endl;
    }

    Queue<int> q2(2);
    try{
        cout<<"Attempting to dequeue from an empty queue..."<<endl;
        q2.dequeue();
    }catch(QueueUnderflowException e){
        cout<<"Caught QueueUnderflowException what(): "<<e.what()<<endl;
    }

    return 0;
}
