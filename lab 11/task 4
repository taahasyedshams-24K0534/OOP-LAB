#include<iostream>
#include<exception>

using namespace std;

class DatabaseException:public exception{
public:
    const char* what()const noexcept override{
        return"A database error occurred.";
    }
};

class ConnectionFailedException:public DatabaseException{};
class QueryTimeoutException:public DatabaseException{};

template<typename T>
class DatabaseConnector{
    T dbName;
public:
    DatabaseConnector(T name):dbName(name){}

    void connect(){
        if(dbName=="invalid_db")throw ConnectionFailedException();
        if(dbName=="slow_db")throw QueryTimeoutException();
        cout<<"Connected to "<<dbName<<endl;
    }
};

int main(){
    try{
        DatabaseConnector<string> db1("invalid_db");
        cout<<"Attempting to connect to invalid_db..."<<endl;
        db1.connect();
    }catch(ConnectionFailedException e){
        cout<<"Caught Connection FailedException what(): "<<e.what()<<endl;
    }

    try{
        DatabaseConnector<string> db2("slow_db");
        cout<<"Attempting to connect to slow_db..."<<endl;
        db2.connect();
    }catch(DatabaseException e){
        cout<<"Caught a general DatabaseException what(): "<<e.what()<<endl;
    }

    return 0;
}
