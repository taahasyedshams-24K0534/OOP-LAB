#include<iostream>
using namespace std;

class MatrixHelper;

class Matrix2x2 {
private:
    int m11,m12,m21,m22;
public:
    Matrix2x2(int a,int b,int c,int d):m11(a),m12(b),m21(c),m22(d){}
    friend class MatrixHelper;
    friend int determinant(const Matrix2x2& m);
    Matrix2x2 operator+(const Matrix2x2& other){
        return Matrix2x2(m11+other.m11,m12+other.m12,m21+other.m21,m22+other.m22);
    }
    Matrix2x2 operator-(const Matrix2x2& other){
        return Matrix2x2(m11-other.m11,m12-other.m12,m21-other.m21,m22-other.m22);
    }
    Matrix2x2 operator*(const Matrix2x2& other){
        int new_m11=m11*other.m11+m12*other.m21;
        int new_m12=m11*other.m12+m12*other.m22;
        int new_m21=m21*other.m11+m22*other.m21;
        int new_m22=m21*other.m12+m22*other.m22;
        return Matrix2x2(new_m11,new_m12,new_m21,new_m22);
    }
    friend ostream& operator<<(ostream& os,const Matrix2x2& m){
        os<<m.m11<<" "<<m.m12<<endl;
        os<<m.m21<<" "<<m.m22<<endl;
        return os;
    }
};

class MatrixHelper {
public:
    void updateElement(Matrix2x2& m,int row,int col,int value){
        if(row==1&&col==1) m.m11=value;
        else if(row==1&&col==2) m.m12=value;
        else if(row==2&&col==1) m.m21=value;
        else if(row==2&&col==2) m.m22=value;
    }
};

int determinant(const Matrix2x2& m){
    return m.m11*m.m22-m.m12*m.m21;
}

int main(){
    Matrix2x2 mat1(1,2,3,4);
    Matrix2x2 mat2(5,6,7,8);
    cout<<"Matrix 1: \n"<<mat1;
    cout<<"Matrix 2: \n"<<mat2;
    Matrix2x2 mat3=mat1+mat2;
    cout<<"Matrix 1 + Matrix 2: \n"<<mat3;
    Matrix2x2 mat4=mat1-mat2;
    cout<<"Matrix 1 - Matrix 2: \n"<<mat4;
    Matrix2x2 mat5=mat1*mat2;
    cout<<"Matrix 1 * Matrix 2: \n"<<mat5;
    cout<<"Determinant of Matrix 1: "<<determinant(mat1)<<endl;
    cout<<"Determinant of Matrix 2: "<<determinant(mat2)<<endl;
    MatrixHelper helper;
    helper.updateElement(mat1,1,1,10);
    cout<<"Updated Matrix 1: \n"<<mat1;
    return 0;
}
